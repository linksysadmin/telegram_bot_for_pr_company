import logging
import random
import time

from telebot import apihelper

from config import OPERATOR_ID, DIR_FOR_OTHER_FILES, DIR_FOR_REPORTS, DIR_FOR_COMMERCIAL_OFFERS, \
    DIR_FOR_TECHNICAL_TASKS, DIR_FOR_SAVE_DIALOGS, bot
from handlers.keyboards import general_keyboard, client_keyboard, operator_keyboard
from handlers.text_messages import TEXT_MESSAGES

from services.db_data import db
from services.file_handler import find_user_documents, get_list_of_clients_dialogue_files, file_check, \
    generate_technical_task_file
from services.redis_db import redis_cache
from services.states import GeneralStates, OperatorStates
from services.status import ClientStatus
from services.string_parser import Parser
from services.tg_games import games

logger = logging.getLogger(__name__)





class GeneralCallback:

    def send_document_to_telegram(self, addressee_id: int, document_path, caption, visible_file_name):
        try:
            with open(document_path, 'rb') as file:
                bot.send_document(chat_id=addressee_id, document=file,
                                  caption=caption,
                                  disable_content_type_detection=True,
                                  visible_file_name=visible_file_name)
            logger.info(f'–§–∞–π–ª —É–¥–∞—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {addressee_id}')
        except Exception as e:
            logger.error(f'–ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {addressee_id}. –û—à–∏–±–∫–∞: {e}')


    def enter_menu(self, call):

        client_id = call.from_user.id
        user_data = db.get_users_data(client_id)
        reply_markup = general_keyboard.enter_menu(doc=False)
        if user_data['documents']:
            reply_markup = general_keyboard.enter_menu(doc=True)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=TEXT_MESSAGES['start'].format(username=user_data['name'],
                                                                 company=user_data['company']),
                              reply_markup=reply_markup)

    def briefing(self, call):
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=TEXT_MESSAGES['menu'], reply_markup=general_keyboard.directions())

    def directory(self, call):
        direction = call.data
        list_of_sub_directions = db.get_sub_directions(direction)
        if list_of_sub_directions:
            keyboard = general_keyboard.sub_directions(direction, list_of_sub_directions)
        else:
            list_of_sections = db.get_sections_from_db(direction)
            keyboard = general_keyboard.sections(direction, list_of_sections)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=TEXT_MESSAGES['menu'],
                              reply_markup=keyboard)

    def sub_directory(self, call):
        path = call.data
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=TEXT_MESSAGES['menu'],
                              reply_markup=general_keyboard.sections_from_subcategory(path))



    def section(self, call):
        path = call.data
        directory, sub_direction, section = Parser.get_directory_sub_direction_section(path)
        redis_cache.set_directory_subdir_section(call.from_user.id, path)
        keyboard = general_keyboard.questions(call.from_user.id, directory, sub_direction, section)
        if call.from_user.id == OPERATOR_ID:
            keyboard = operator_keyboard.questions(directory, sub_direction, section)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=TEXT_MESSAGES['menu'],
                              reply_markup=keyboard)

    def cancel_to_directions(self, call):
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=TEXT_MESSAGES['menu'],
                              reply_markup=general_keyboard.directions())

    def question(self, call):
        user_id = call.from_user.id
        question_id, number_of_question = Parser.get_question_id_and_number(call.data)
        redis_cache.set_id_and_number_of_question(user_id, question_id, number_of_question)
        question, answers = db.get_question_and_answers_from_db(question_id)
        user_answer = db.get_user_answer(user_id, question_id)
        if user_answer:
            bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id,
                                  text=f'‚ùì{question}?\n\n–í–∞—à –æ—Ç–≤–µ—Ç:{user_answer}',
                                  reply_markup=client_keyboard.change_answer())
            return
        bot.set_state(user_id, GeneralStates.answer_to_question, call.from_user.id)
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, f'‚ùì{question}?\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"',
                         reply_markup=client_keyboard.answer(answers))


class ClientCallback(GeneralCallback):

    def __show_files_for_client(self, call, directory):
        user_id = call.from_user.id
        logger.info(f'–ö–ª–∏–µ–Ω—Ç {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª—ã')
        dict_path_to_files = find_user_documents(user_id, directory)
        redis_cache.set_selected_directory(call.from_user.id, directory)
        if not dict_path_to_files:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
        else:
            redis_cache.save_dict_of_path_for_download_file(user_id, dict_path_to_files)
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=text, reply_markup=client_keyboard.files(dict_path_to_files))

    def file_types(self, call):
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞',
                              reply_markup=client_keyboard.types_of_files())

    def technical_task(self, call):
        self.__show_files_for_client(call, DIR_FOR_TECHNICAL_TASKS)

    def commercial_offer(self, call):
        self.__show_files_for_client(call, DIR_FOR_COMMERCIAL_OFFERS)

    def reports(self, call):
        self.__show_files_for_client(call, DIR_FOR_REPORTS)

    def documents(self, call):
        self.__show_files_for_client(call, DIR_FOR_OTHER_FILES)

    def chat_with_operator(self, call):
        bot.send_contact(call.message.chat.id, phone_number='+74950188868', first_name='–û–ø–µ—Ä–∞—Ç–æ—Ä Mr.–≠–π—á')
        bot.send_message(call.message.chat.id, TEXT_MESSAGES['chat_with_operator'])

    def blog(self, call):
        user_id = call.from_user.id
        bot.send_message(call.message.chat.id,
                         '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ üòâ\n\n'
                         '/cancel - –í—ã—Ö–æ–¥ –∏–∑ –±–ª–æ–≥–∞')
        bot.set_state(user_id, GeneralStates.chat_gpt)

    def change_answer(self, call):
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.set_state(call.from_user.id, GeneralStates.answer_to_question, call.from_user.id)
        question_id = redis_cache.get_question_id(call.from_user.id)
        question, answers = db.get_question_and_answers_from_db(question_id)
        bot.send_message(call.message.chat.id, f'‚ùì{question}?\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"',
                         reply_markup=client_keyboard.answer(answers))

    def grade(self, call):
        bot.delete_message(call.message.chat.id, call.message.id)
        match call.data:
            case 'client_grade_yes':
                user_data = db.get_users_data(call.from_user.id)
                path_to_file = redis_cache.get_last_file_path(call.from_user.id)
                caption = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_data['name']}\n" \
                          f"Username: {user_data['tg_username']}\n" \
                          f"–ö–æ–º–ø–∞–Ω–∏—è: {user_data['company']}\n" \
                          f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n" \
                          f"Website: {user_data['website']}\n"
                visible_file_name = f'–¢–µ—Ö.–∑–∞–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ {user_data["company"]}.docx'
                self.send_document_to_telegram(OPERATOR_ID, path_to_file, caption=caption,
                                               visible_file_name=visible_file_name)
                redis_cache.add_client_to_queue(call.from_user.id)
                bot.send_message(OPERATOR_ID, '–ù–∞—á–∞—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º ?',
                                 reply_markup=operator_keyboard.customer_information(call.from_user.id))
            case 'client_grade_no':
                bot.send_message(call.message.chat.id, f'–•–æ—Ä–æ—à–æ, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!')

    # –î–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

    def instant_messaging_service(self, call):
        client_id = call.from_user.id
        user_data = db.get_users_data(client_id)
        operator_state = redis_cache.get_operator_state()
        logger.info(f'–ó–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–∞ –¥–∏–∞–ª–æ–≥')
        match operator_state:
            case b'free' | None:
                redis_cache.set_operator_state(b'busy')
                logger.info(f'–ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ "–∑–∞–Ω—è—Ç" (busy)')
                bot.send_message(OPERATOR_ID, f'üí¨–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∏–∞–ª–æ–≥!üß®\n\n–ö–ª–∏–µ–Ω—Ç: {user_data["name"]}\n'
                                              f'–ö–æ–º–ø–∞–Ω–∏—è: {user_data["company"]}\n'
                                              f'–¢–µ–ª–µ—Ñ–æ–Ω: {user_data["phone"]}',
                                 reply_markup=operator_keyboard.customer_information(client_id))
            case _:
                logger.info(f'–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–Ω—è—Ç')
        match redis_cache.add_client_to_queue(client_id):
            case True:
                logger.info(f'–ö–ª–∏–µ–Ω—Ç {client_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')
                bot.send_message(call.message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è...')
            case _:
                logger.info(f'–ö–ª–∏–µ–Ω—Ç {client_id} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏')
                bot.send_message(call.message.chat.id,
                                 '–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Äüë® –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º ‚Äçüíªüòä')
                bot.send_message(OPERATOR_ID,
                                 f'‚ùóÔ∏è–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –∫–ª–∏–µ–Ω—Ç–µ\n'
                                 f'–û–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥\n\n'
                                 f'–ö–ª–∏–µ–Ω—Ç: {user_data["name"]}\n'
                                 f'–ö–æ–º–ø–∞–Ω–∏—è: {user_data["company"]}\n'
                                 f'–¢–µ–ª–µ—Ñ–æ–Ω: {user_data["phone"]}\n\n'
                                 f'–ú–µ–Ω—é(/start) -> –ó–∞–ø—Ä–æ—Å—ã'
                                 )

    def back_to_questions(self, call):
        directory, sub_direction, section = redis_cache.get_directory_subdir_section(call.from_user.id)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=TEXT_MESSAGES['menu'],
                              reply_markup=general_keyboard.questions(call.from_user.id, directory,
                                                                      sub_direction,
                                                                      section))

    def generation_technical_exercise(self, call):
        logger.info(f'–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞')
        client_id = call.from_user.id
        directory, section = Parser.get_directory_sub_direction_section(call.data)
        all_emoji = ['üé≤', 'üéØ', 'üèÄ', '‚öΩ', 'üé≥', 'üé∞']
        bot.send_dice(client_id, emoji=random.choice(all_emoji), timeout=5)
        bot.send_chat_action(client_id, action="upload_document", timeout=3)
        bot.send_message(client_id, '–í–∞—à —Ñ–∞–π–ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –∞ –ø–æ–∫–∞, –¥–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º üòä')
        time.sleep(3)

        bot.send_message(client_id, '–•–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –º—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤–∞—à –ø—Ä–æ–µ–∫—Ç?',
                         reply_markup=client_keyboard.evaluation())

        user_data = db.get_users_data(client_id)
        questions, answers = db.get_user_list_of_questions_informal_and_answers(client_id, directory, section)
        bot.delete_message(call.message.chat.id, call.message.id)
        db.delete_user_answers_in_section(call.from_user.id, directory, section)
        document_path = generate_technical_task_file(user_id=client_id,
                                                     section=section,
                                                     client_name=user_data['name'],
                                                     company=user_data['company'],
                                                     phone=user_data['phone'],
                                                     website=user_data['website'],
                                                     list_of_questions=questions,
                                                     answers=answers)
        redis_cache.set_last_file_path(client_id, document_path)
        db.update_info_about_user_docs_in_db(client_id, documents=True)
        db.update_user_status(client_id, ClientStatus.tech_task)
        time.sleep(1)
        self.send_document_to_telegram(client_id, document_path, caption="–í–∞—à —Ñ–∞–π–ª",
                                       visible_file_name=f'{user_data["company"]}.docx')

    def get_file(self, call):
        bot.delete_message(call.message.chat.id, call.message.id)
        client_id = call.from_user.id
        key_for_path = Parser.get_key_for_path(call.data)
        path_to_file = redis_cache.get_path_for_download_file_by_key(client_id, key_for_path)
        logger.info(f'–ö–ª–∏–µ–Ω—Ç {client_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª: {path_to_file}')
        user_data = db.get_users_data(client_id)
        file_type = Parser.get_file_type(path_to_file)
        self.send_document_to_telegram(client_id, path_to_file, caption="–í–∞—à —Ñ–∞–π–ª",
                                       visible_file_name=f'{user_data["company"]}.{file_type}')


class GameCallback:

    def choose_game(self, call):
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:',
                              reply_markup=general_keyboard.games())

    def send_game(self, call):
        game = call.data
        try:
            bot.send_game(call.from_user.id, game_short_name=game)
        except apihelper.ApiTelegramException:
            logger.error('–ò–≥—Ä–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ, –ª–∏–±–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã')

    def game(self, call):
        short_name = call.game_short_name
        for game in games.list:
            if short_name == game.official_name:
                bot.answer_callback_query(call.id, url=game.url)


class OperatorCallback(GeneralCallback):

    def __get_file_path_caption_and_filename(self, call, client_id):
        key_for_path = Parser.get_key_for_path(call.data)
        path_to_file = redis_cache.get_path_for_download_file_by_key(client_id, key_for_path)
        logger.info(f'–û–ø–µ—Ä–∞—Ç–æ—Ä {call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞: {path_to_file}')
        user_data = db.get_users_data(client_id)
        file_type = Parser.get_file_type(path_to_file)
        caption = f"–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_data['name']}\n" \
                  f"Username: {user_data['tg_username']}\n" \
                  f"–ö–æ–º–ø–∞–Ω–∏—è: {user_data['company']}\n" \
                  f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n" \
                  f"Website: {user_data['website']}\n"
        visible_file_name = f'{user_data["company"]}.{file_type}'
        return path_to_file, caption, visible_file_name

    def requests(self, call):
        queue_of_clients = redis_cache.get_queue_of_clients()
        text = '–ó–∞–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        if not queue_of_clients:
            text = '–ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç'
        callback_data_prefix = 'queue'
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=text,
                              reply_markup=operator_keyboard.clients(queue_of_clients, callback_data_prefix))

    def clients(self, call):
        list_of_clients = get_list_of_clients_dialogue_files()
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:'
        callback_data_prefix = 'client|info'
        if not list_of_clients:
            text = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º'
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=text,
                              reply_markup=operator_keyboard.clients(list_of_clients, callback_data_prefix))

    def tasks(self, call):
        pass

    def settings(self, call):
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–µ–∫—Ü–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª—ã',
                              reply_markup=operator_keyboard.settings())

    def enter_menu(self, call):
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=TEXT_MESSAGES['start_for_operator'],
                              reply_markup=operator_keyboard.enter_menu())

    def back_to_questions(self, call):
        directory, sub_direction, section = redis_cache.get_directory_subdir_section(call.from_user.id)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=TEXT_MESSAGES['menu'],
                              reply_markup=operator_keyboard.questions(directory, sub_direction, section))

    def get_dialogue_history(self, call):
        client_id = Parser.get_client_id(call.data)
        path_to_dialogue_file = f'{DIR_FOR_SAVE_DIALOGS}/{client_id}/dialogue.log'
        if file_check(path_to_dialogue_file):
            self.send_document_to_telegram(call.from_user.id, path_to_dialogue_file,
                                           caption='–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞',
                                           visible_file_name='–î–∏–∞–ª–æ–≥.log')
        else:
            bot.send_message(call.from_user.id, '–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞')

    def file_types(self, call):
        client_id = Parser.get_client_id(call.data)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                              reply_markup=operator_keyboard.types_documents(client_id))

    def __show_client_files_in_dialogue(self, call, dir_path, client_id):
        if client_id is None:
            bot.delete_message(call.message.chat.id, call.message.id)
            return
        dict_path_to_files = find_user_documents(client_id, dir_path)
        redis_cache.set_selected_directory(call.from_user.id, dir_path)
        if not dict_path_to_files:
            text = f'–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞'
        else:
            redis_cache.save_dict_of_path_for_download_file(client_id, dict_path_to_files)
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
                              reply_markup=operator_keyboard.client_files(dict_path_to_files, in_dialogue=True))

    def technical_tasks_in_dialogue(self, call):
        user_id = redis_cache.get_first_client_from_queue()
        self.__show_client_files_in_dialogue(call, DIR_FOR_TECHNICAL_TASKS, user_id)

    def commercial_offers_in_dialogue(self, call):
        user_id = redis_cache.get_first_client_from_queue()
        self.__show_client_files_in_dialogue(call, DIR_FOR_COMMERCIAL_OFFERS, user_id)

    def reports_in_dialogue(self, call):
        user_id = redis_cache.get_first_client_from_queue()
        self.__show_client_files_in_dialogue(call, DIR_FOR_REPORTS, user_id)

    def other_documents_in_dialogue(self, call):
        user_id = redis_cache.get_first_client_from_queue()
        self.__show_client_files_in_dialogue(call, DIR_FOR_OTHER_FILES, user_id)

    def __show_client_files(self, call, dir_path, client_id):
        logger.info(f'–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞: {client_id}')
        dict_path_to_files = find_user_documents(client_id, dir_path)
        redis_cache.set_selected_directory(call.from_user.id, dir_path)
        redis_cache.set_user_to_display_information(client_id)
        if not dict_path_to_files:
            text = f'–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞'
        else:
            redis_cache.save_dict_of_path_for_download_file(client_id, dict_path_to_files)
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text,
                              reply_markup=operator_keyboard.client_files(dict_path_to_files))

    def client_technical_tasks(self, call):
        client_id = Parser.get_client_id(call.data)
        self.__show_client_files(call, DIR_FOR_TECHNICAL_TASKS, client_id)

    def client_commercial_offers(self, call):
        client_id = Parser.get_client_id(call.data)
        self.__show_client_files(call, DIR_FOR_COMMERCIAL_OFFERS, client_id)

    def client_reports(self, call):
        client_id = Parser.get_client_id(call.data)
        self.__show_client_files(call, DIR_FOR_REPORTS, client_id)

    def client_other_documents(self, call):
        client_id = Parser.get_client_id(call.data)
        self.__show_client_files(call, DIR_FOR_OTHER_FILES, client_id)

    def enter_menu_in_dialogue(self, call):
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–ú–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
                              reply_markup=operator_keyboard.menu_in_dialogue())

    def upload_file_in_dialogue(self, call):
        directory = redis_cache.get_selected_directory(call.from_user.id)
        logger.info(f'–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {directory}')
        dir_to_state = {
            DIR_FOR_TECHNICAL_TASKS: OperatorStates.get_technical_task_file_in_dialogue,
            DIR_FOR_COMMERCIAL_OFFERS: OperatorStates.get_commercial_offer_file_in_dialogue,
            DIR_FOR_REPORTS: OperatorStates.get_report_file_in_dialogue,
            DIR_FOR_OTHER_FILES: OperatorStates.get_other_file_in_dialogue
        }
        message = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª'
        state = dir_to_state.get(directory)
        bot.send_message(call.from_user.id, message)
        bot.set_state(call.from_user.id, state, call.from_user.id)

    def upload_file(self, call):
        directory = redis_cache.get_selected_directory(call.from_user.id)
        logger.info(f'–í—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {directory}')
        dir_to_state = {
            DIR_FOR_TECHNICAL_TASKS: GeneralStates.get_technical_task_file,
            DIR_FOR_COMMERCIAL_OFFERS: GeneralStates.get_commercial_offer_file,
            DIR_FOR_REPORTS: GeneralStates.get_report_file,
            DIR_FOR_OTHER_FILES: GeneralStates.get_other_file
        }
        message = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª'
        state = dir_to_state.get(directory)
        bot.send_message(call.from_user.id, message)
        bot.set_state(call.from_user.id, state, call.from_user.id)

    def queue(self, call):
        client_id = Parser.get_client_id(call.data)
        redis_cache.move_client_to_first_place_in_queue(client_id)
        bot.send_message(call.message.chat.id, '–í—Å—Ç—É–ø–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ?',
                         reply_markup=operator_keyboard.customer_information(client_id))

    def change_question(self, call):
        question_id, number_of_question = Parser.get_question_id_and_number(call.data)
        question, default_answers = db.get_question_and_answers_from_db(question_id)
        if not default_answers:
            default_answers = '–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤'
        bot.set_state(call.from_user.id, OperatorStates.change_question)
        bot.add_data(call.from_user.id, question_id_for_change=question_id)
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, f'–í–æ–ø—Ä–æ—Å: {question}?\n\n–û—Ç–≤–µ—Ç—ã:\n{default_answers}\n'
                                               f'–í–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                                               f'–í–û–ü–†–û–° || –û–¢–í–ï–¢1| –û–¢–í–ï–¢2| –û–¢–í–ï–¢3\n\n'
                                               f'–ü—Ä–∏–º–µ—Ä:\n'
                                               f'–ö–∞–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –†–æ—Å—Å–∏–∏ || 11| 34| –ù–µ –∑–Ω–∞—é',
                         reply_markup=operator_keyboard.change_question())

    def add_question(self, call):
        bot.set_state(call.from_user.id, OperatorStates.add_question)
        bot.send_message(call.message.chat.id, f'–í–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                                               f'–í–û–ü–†–û–° || –û–¢–í–ï–¢1| –û–¢–í–ï–¢2| –û–¢–í–ï–¢3\n\n'
                                               f'\t–ü—Ä–∏–º–µ—Ä:\t\n'
                                               f'–ö–∞–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –†–æ—Å—Å–∏–∏ || 11| 34| –ù–µ –∑–Ω–∞—é')

    # –î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º

    def enter_into_a_dialog(self, call):
        operator = call.from_user.id
        client_id = Parser.get_client_id(call.data)
        redis_cache.move_client_to_first_place_in_queue(client_id)
        redis_cache.set_operator_state(b'busy')
        logger.info(f'–û–ø–µ—Ä–∞—Ç–æ—Ä –≤—Å—Ç—É–ø–∏–ª –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_id}')
        bot.set_state(client_id, GeneralStates.dialogue_with_operator)
        bot.set_state(operator, OperatorStates.dialogue_with_client)
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(client_id, '–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º\n')
        bot.send_message(operator, '–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É:',
                         reply_markup=operator_keyboard.menu_in_dialogue())
        logger.info(
            f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - {bot.get_state(client_id)}, –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {bot.get_state(operator)}')

    def client_info(self, call):
        operator = call.from_user.id
        client_id = Parser.get_client_id(call.data)
        bot.send_message(operator, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                         reply_markup=operator_keyboard.customer_information(client_id))

    def left_dialog(self, call):
        bot.delete_message(call.message.chat.id, call.message.id)
        client_id = redis_cache.get_first_client_and_delete_from_queue()
        if client_id is None:
            bot.send_message(OPERATOR_ID, f'–í—ã —É–∂–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –∏–∑ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞')
            return
        bot.delete_state(OPERATOR_ID, OPERATOR_ID)
        bot.delete_state(client_id, client_id)
        logger.info(f'–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {client_id}')
        logger.info(
            f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - {bot.get_state(client_id, client_id)}, –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {bot.get_state(OPERATOR_ID, OPERATOR_ID)}')
        bot.send_message(OPERATOR_ID, f'–í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞!')
        next_client = redis_cache.get_first_client_from_queue()
        if next_client is None:
            redis_cache.set_operator_state(b'free')
            logger.info(f'–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç, —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤ "—Å–≤–æ–±–æ–¥–µ–Ω" (free)')
            return
        logger.info(f'–ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –¥–∏–∞–ª–æ–≥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {next_client}')
        logger.info(f'–ï—Å—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏, —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ "–∑–∞–Ω—è—Ç" (busy)')
        redis_cache.set_operator_state(b'busy')
        bot.send_message(OPERATOR_ID, f'üí¨–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∏–∞–ª–æ–≥!üß®\n\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nID: {next_client}\n',
                         reply_markup=operator_keyboard.customer_information(next_client))

    def get_file_in_dialogue(self, call):
        client_id = redis_cache.get_first_client_from_queue()
        path_to_file, caption, visible_file_name = self.__get_file_path_caption_and_filename(call, client_id)
        self.send_document_to_telegram(OPERATOR_ID, path_to_file, caption=caption,
                                       visible_file_name=visible_file_name)

    def get_file(self, call):
        client_id = redis_cache.get_user_to_display_information()
        path_to_file, caption, visible_file_name = self.__get_file_path_caption_and_filename(call, client_id)
        self.send_document_to_telegram(OPERATOR_ID, path_to_file, caption=caption,
                                       visible_file_name=visible_file_name)


game_callback = GameCallback()
general_callback = GeneralCallback()
client_callback = ClientCallback()
operator_callback = OperatorCallback()






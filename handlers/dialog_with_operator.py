import logging

from telebot import apihelper

from config import OPERATOR_ID
from handlers.keyboards import keyboard_for_delete_dialogue, keyboard_for_enter_dialogue, \
    keyboard_enter_menu_for_clients, keyboard_for_menu_in_dialogue
from services.redis_db import get_operator_state, set_operator_state, add_client_to_queue, get_next_client_from_queue, \
    get_client_id
from services.states import MyStates

logger = logging.getLogger(__name__)
log_dialogue_in_file = logging.getLogger('logger_for_dialogue')
file_handler = logging.FileHandler('logs/dialogue.log')
formatter = logging.Formatter('%(asctime)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
file_handler.setFormatter(formatter)
log_dialogue_in_file.addHandler(file_handler)
log_dialogue_in_file.setLevel(logging.INFO)
log_dialogue_in_file.propagate = False


def callback_instant_messaging_service(call, bot):
    client_id = call.from_user.id
    operator_state = get_operator_state()
    logger.info(f'–ó–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–∞ –¥–∏–∞–ª–æ–≥. –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {operator_state}')
    match operator_state:
        case b'free':
            logger.info(f'–ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –¥–∏–∞–ª–æ–≥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {client_id}')
            set_operator_state(b'busy')
            bot.send_message(OPERATOR_ID, f'üí¨–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∏–∞–ª–æ–≥!üß®\n\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nID: {call.from_user.id}\n'
                                          f'–ò–º—è: {call.from_user.first_name}',
                             reply_markup=keyboard_for_enter_dialogue())
        case _:
            logger.info(f'–ö–ª–∏–µ–Ω—Ç {client_id} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏')
    match add_client_to_queue(client_id):
        case True:
            bot.send_message(call.message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è...')
        case _:
            bot.send_message(call.message.chat.id,
                             '–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Äüë® –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º ‚Äçüíªüòä')


def callback_enter_into_a_dialog(call, bot):
    try:
        set_operator_state(b'busy')
        client_id = get_client_id()
        logger.warning(client_id)
        bot.set_state(client_id, MyStates.dialogue_with_operator, client_id)
        bot.set_state(OPERATOR_ID, MyStates.dialogue_with_client, OPERATOR_ID)
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(client_id, '–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º\n', reply_markup=keyboard_for_delete_dialogue())
        bot.send_message(OPERATOR_ID, '–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n–ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É:',
                         reply_markup=keyboard_for_delete_dialogue())
        logger.info(
            f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - {bot.get_state(client_id, client_id)}, –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {bot.get_state(OPERATOR_ID, OPERATOR_ID)}')
    except Exception as e:
        logger.error(f'{e}')


def send_request_to_operator(message, bot):
    bot.send_message(message.from_user.id, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è...')


def send_message_to_client(message, bot):
    client_id = get_client_id()
    if message.document is not None:
        bot.send_document(client_id, document=message.document.file_id)
        return
    bot.send_message(client_id, f'üí¨–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}')
    logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {bot.get_state(message.from_user.id, message.chat.id)}')
    log_dialogue_in_file.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}')


def send_message_to_operator(message, bot):
    if message.document is not None:
        bot.send_document(OPERATOR_ID, document=message.document.file_id)
        return
    bot.send_message(OPERATOR_ID, f'üí¨–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{message.from_user.id}\n\n{message.text}',
                     reply_markup=keyboard_for_menu_in_dialogue())
    log_dialogue_in_file.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {message.text}')


def callback_cancel_from_dialog(call, bot):
    bot.delete_message(call.message.chat.id, call.message.id)
    try:
        client_id = get_next_client_from_queue()
        logger.info(f'–í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞: {client_id}')
    except TypeError:
        bot.send_message(OPERATOR_ID, f'–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç')
        return
    bot.delete_state(OPERATOR_ID, OPERATOR_ID)
    bot.delete_state(client_id, client_id)
    logger.info(
        f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - {bot.get_state(client_id, client_id)}, –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - {bot.get_state(OPERATOR_ID, OPERATOR_ID)}')
    try:
        if call.from_user.id == OPERATOR_ID:
            bot.send_message(OPERATOR_ID, f'–í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞!')
            bot.send_message(client_id, f'–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å –≤–∞–º–∏',
                             reply_markup=keyboard_enter_menu_for_clients())
        else:
            bot.send_message(call.from_user.id, f'–í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞\n\n–ù–∞–∂–º–∏—Ç–µ /start - –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é')
            bot.send_message(OPERATOR_ID, f'–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ —Å –≤–∞–º–∏')
    except apihelper.ApiTelegramException:
        set_operator_state(b'free')
        logger.warning('–ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    try:
        next_client = get_client_id()
        if next_client is None:
            set_operator_state(b'free')
            logger.info('–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤–æ–±–æ–¥–µ–Ω')
            return
        set_operator_state(b'busy')
        logger.info(f'–ó–∞–ø—Ä–æ—Å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –¥–∏–∞–ª–æ–≥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {next_client}')
        bot.send_message(OPERATOR_ID, f'üí¨–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–∏–∞–ª–æ–≥!üß®\n\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nID: {next_client}\n'
                         , reply_markup=keyboard_for_enter_dialogue())
    except TypeError:  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º
        set_operator_state(b'free')
        logger.info('–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤–æ–±–æ–¥–µ–Ω')

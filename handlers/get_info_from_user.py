import logging


from handlers.commands import start
from handlers.keyboards import remove_keyboard, \
    keyboard_send_phone, keyboard_for_answer, keyboard_enter_menu_for_clients, \
    keyboard_for_questions, keyboard_for_sex, keyboard_for_age, keyboard_for_other_answers
from handlers.text_messages import TEXT_MESSAGES
from services.db_data import add_clients_data_to_db, get_question_and_answers_from_db, add_user_answers_to_db, \
    get_user_answer
from services.redis_db import add_answers_to_list, get_user_answers, \
    get_question_id_from_redis, delete_user_answers_from_redis, get_keyboard_for_questions_from_redis, \
    get_next_question_callback_from_redis, set_question_id_in_redis, set_next_question_callback_in_redis, \
    get_max_question_id_in_redis
from services.states import MyStates

logger = logging.getLogger(__name__)


def get_user_name(message, bot):
    """ STATE 1 –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    bot.add_data(message.from_user.id, message.chat.id, name=message.text, tg_username=message.from_user.username)
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'
                                      ' —Ç–µ–ª–µ—Ñ–æ–Ω–∞" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ üì≤', reply_markup=keyboard_send_phone())
    bot.set_state(message.chat.id, MyStates.phone_number, message.from_user.id)
    logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')


def get_user_phone(message, bot):
    """ STATE 2 - –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    phone = message.text
    if message.contact is not None:
        phone = message.contact.phone_number
    bot.add_data(message.from_user.id, message.chat.id, phone=phone)
    remove_keyboard(message, bot, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –í–µ–±-—Å–∞–π—Ç')
    bot.set_state(message.chat.id, MyStates.website, message.from_user.id)
    logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')


def get_user_website(message, bot):
    """ STATE 3 - –ü–æ–ª—É—á–µ–Ω–∏–µ website –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    website = message.text
    bot.add_data(message.from_user.id, message.chat.id, website=website)
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏¬©Ô∏è')
    bot.set_state(message.chat.id, MyStates.company, message.from_user.id)
    logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')


def get_user_company(message, bot):
    """ STATE 4 - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö """
    user_id = message.from_user.id
    company = message.text
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        logger.info(f'–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data}')
        name = data['name']
        tg_username = data['tg_username']
        phone = data['phone']
        website = data['website']
        add_clients_data_to_db(user_id, name, tg_username, phone, company, website)
    bot.delete_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, TEXT_MESSAGES['start'].format(username=name,
                                                                    company=message.text),
                     reply_markup=keyboard_enter_menu_for_clients())
    logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')


def get_answer_from_user(message, bot):
    match message.text:
        case '–ü–æ–ª':
            add_answers_to_list(client_id=message.from_user.id, answer=message.text)
            bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª', reply_markup=keyboard_for_sex())
        case '–í–æ–∑—Ä–∞—Å—Ç':
            add_answers_to_list(client_id=message.from_user.id, answer=message.text)
            bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=keyboard_for_age())
        case '–î–æ—Ö–æ–¥' | '–ò–Ω—Ç–µ—Ä–µ—Å—ã':
            add_answers_to_list(client_id=message.from_user.id, answer=message.text)
            bot.send_message(message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ {message.text.lower()}', reply_markup=keyboard_for_other_answers())
        case _:
            add_answers_to_list(client_id=message.from_user.id, answer=message.text)
            bot.send_message(message.chat.id, f'–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç" –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å')


def next_question(message, bot):
    callback_for_next_question = get_next_question_callback_from_redis(message.from_user.id)
    next_question_id = int(callback_for_next_question.split('_')[1])
    max_question_id = get_max_question_id_in_redis(message.from_user.id)

    if next_question_id <= max_question_id:
        next_callback = f"{callback_for_next_question.split('_')[0]}_{int(callback_for_next_question.split('_')[1]) + 1}"
        set_question_id_in_redis(user=message.from_user.id, question_id=next_question_id)
        set_next_question_callback_in_redis(user=message.from_user.id, callback=next_callback)
    elif next_question_id > max_question_id:
        remove_keyboard(message, bot, '–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–æ–ª—å—à–µ, –Ω–µ—Ç(')
        start(message, bot)
        return
    question, answers = get_question_and_answers_from_db(next_question_id)
    user_answer = get_user_answer(message.from_user.id, next_question_id)
    if bool(user_answer):
        user_answer = user_answer[0][0]
        bot.send_message(message.chat.id, f'‚ùì{question}?\n\n–í–∞—à–µ –æ—Ç–≤–µ—Ç:{user_answer}',
                         reply_markup=keyboard_for_answer(answers))
        return
    bot.set_state(message.from_user.id, MyStates.answer_to_question, message.from_user.id)
    bot.send_message(message.chat.id, f'‚ùì{question}?\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"',
                     reply_markup=keyboard_for_answer(answers))


def send_user_answers_to_db(message, bot):
    """ –í—ã—Ö–æ–¥ –∏–∑ state –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    text_answers = "|".join(get_user_answers(user=message.from_user.id))
    question_id = get_question_id_from_redis(user=message.from_user.id)
    add_user_answers_to_db(user_id=message.from_user.id, question_id=question_id, user_response=text_answers)
    delete_user_answers_from_redis(user=message.from_user.id)
    bot.delete_state(message.from_user.id, message.chat.id)
    remove_keyboard(message, bot, '–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!')
    path = get_keyboard_for_questions_from_redis(message.from_user.id)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:',
                     reply_markup=keyboard_for_questions(message.from_user.id, path=path))


def phone_incorrect(message, bot):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"+7XXXXXXXXXX",\n'
                                      '8XXXXXXXXXX\n9XXXXXXXXX\n\n–ü—Ä–∏–º–µ—Ä: 89953423452')

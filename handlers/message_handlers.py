import logging

from openai import error

from config import (DIR_FOR_COMMERCIAL_OFFERS, DIR_FOR_REPORTS, DIR_FOR_OTHER_FILES, DIR_FOR_TECHNICAL_TASKS,
                    bot, OPERATOR_ID)
from handlers.command_handlers import client_command
from handlers.keyboards import remove_keyboard, general_keyboard, operator_keyboard, client_keyboard
from handlers.text_messages import TEXT_MESSAGES
from services.chatgpt import generate_response_from_chat_gpt
from services.db_data import db
from services.file_handler import save_file
from services.redis_db import redis_cache
from services.states import GeneralStates, OperatorStates
from services.string_parser import TextParser
from services.dialogue_logging import dialogue_logging

logger = logging.getLogger(__name__)


class UserRegistration:

    def get_user_name(self, message):
        """ STATE 1 –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        bot.add_data(message.from_user.id, message.chat.id, name=message.text,
                            tg_username=message.from_user.username)
        bot.send_message(message.chat.id,
                                '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä'
                                ' —Ç–µ–ª–µ—Ñ–æ–Ω–∞" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ üì≤', reply_markup=client_keyboard.send_phone())
        bot.set_state(message.chat.id, GeneralStates.phone_number, message.from_user.id)
        logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')

    def get_user_phone(self, message):
        """ STATE 2 - –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        phone = message.text
        if message.contact is not None:
            phone = message.contact.phone_number
        bot.add_data(message.from_user.id, message.chat.id, phone=phone)
        remove_keyboard(message, bot, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –í–µ–±-—Å–∞–π—Ç')
        bot.set_state(message.chat.id, GeneralStates.website, message.from_user.id)
        logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')

    def get_user_website(self, message):
        """ STATE 3 - –ü–æ–ª—É—á–µ–Ω–∏–µ website –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
        website = message.text
        bot.add_data(message.from_user.id, message.chat.id, website=website)
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏¬©Ô∏è')
        bot.set_state(message.chat.id, GeneralStates.company, message.from_user.id)
        logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')

    def get_user_company(self, message):
        """ STATE 4 - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö """
        user_id = message.from_user.id
        company = message.text
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            logger.info(f'–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data}')
            name = data['name']
            tg_username = data['tg_username']
            phone = data['phone']
            website = data['website']
            db.add_user_data_to_db('clients', user_id, name, tg_username, phone, company, website)
        bot.delete_state(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id, TEXT_MESSAGES['start'].format(username=name,
                                                                               company=message.text),
                                reply_markup=general_keyboard.enter_menu())
        logger.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {bot.get_state(message.from_user.id, message.chat.id)}')

    def phone_incorrect(self, message):
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"+7XXXXXXXXXX",\n'
                                                 '8XXXXXXXXXX\n9XXXXXXXXX\n\n–ü—Ä–∏–º–µ—Ä: 89953423452')


class ChatGPT:

    def get_question_from_user_for_chat_gpt(self, message):
        bot.send_chat_action(message.from_user.id, action="typing")
        try:
            answer_from_chat_gpt = generate_response_from_chat_gpt(message.text)
            bot.send_message(message.from_user.id, answer_from_chat_gpt)
        except error.RateLimitError:
            bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


class TextButtons:

    def next_question(self, message):
        user_id = message.from_user.id
        directory, sub_direction, section = redis_cache.get_directory_subdir_section(message.from_user.id)
        question_id, number = redis_cache.get_id_and_number_of_question(user_id)
        question_data = db.get_question_data_by_path(directory, sub_direction, section, number)
        text = question_data['question_text']
        id_ = question_data['id']
        answers = question_data['answers']
        user_answer = db.get_user_answer(message.from_user.id, id_)
        if user_answer:
            bot.send_message(message.chat.id, f'‚ùì{text}?\n\n–í–∞—à –æ—Ç–≤–µ—Ç:{user_answer}',
                                    reply_markup=client_keyboard.answer(answers))
            return
        bot.set_state(message.from_user.id, GeneralStates.answer_to_question, message.from_user.id)
        bot.send_message(message.chat.id, f'‚ùì{text}?\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"',
                                reply_markup=client_keyboard.answer(answers))


    def cancel_to_questions(self, message):
        """ –í—ã—Ö–æ–¥ –∏–∑ STATE """
        user_id = message.from_user.id
        bot.delete_state(user_id)
        if redis_cache.get_user_answers(user=user_id):
            redis_cache.delete_user_answers(user=user_id)
        directory, sub_direction, section = redis_cache.get_directory_subdir_section(user_id)
        remove_keyboard(message, bot, '–û—Ç–º–µ–Ω–µ–Ω–æ')
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:',
                                reply_markup=general_keyboard.questions(user_id, directory, sub_direction, section))

    def cancel_to_start_registration(self, message):
        user_id = message.from_user.id
        state = bot.get_state(user_id)
        if state == 'GeneralStates:phone_number':
            remove_keyboard(message, bot, '–û—Ç–º–µ–Ω–µ–Ω–æ')
        bot.set_state(user_id, GeneralStates.name)
        bot.send_message(user_id, TEXT_MESSAGES['start_unauthorized'])

    def no_next_question(self, message):
        remove_keyboard(message, bot, '–í–æ–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–æ–ª—å—à–µ, –Ω–µ—Ç(')
        client_command.start(message, bot)


class AnswerHandler:

    def get_answer_from_user(self, message):
        match message.text:
            case '–ü–æ–ª':
                redis_cache.add_answers_to_list(client_id=message.from_user.id, answer=message.text)
                bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª', reply_markup=client_keyboard.sex())
            case '–í–æ–∑—Ä–∞—Å—Ç':
                redis_cache.add_answers_to_list(client_id=message.from_user.id, answer=message.text)
                bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=client_keyboard.age())
            case '–î–æ—Ö–æ–¥' | '–ò–Ω—Ç–µ—Ä–µ—Å—ã':
                redis_cache.add_answers_to_list(client_id=message.from_user.id, answer=message.text)
                bot.send_message(message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ {message.text.lower()}',
                                        reply_markup=client_keyboard.other_answers())
            case _:
                redis_cache.add_answers_to_list(client_id=message.from_user.id, answer=message.text)
                bot.send_message(message.chat.id,
                                        f'–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç" –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å')

    def send_user_answers_to_db(self, message):
        """ –í—ã—Ö–æ–¥ –∏–∑ state –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        user_id = message.from_user.id
        text_answers = "|".join(redis_cache.get_user_answers(user_id))
        question_id, number = redis_cache.get_id_and_number_of_question(user_id)
        db.add_user_answers_to_db(user_id=user_id, question_id=question_id, user_response=text_answers)
        redis_cache.delete_user_answers(user=message.from_user.id)
        bot.delete_state(message.from_user.id, message.chat.id)
        remove_keyboard(message, bot, '–í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!')
        directory, sub_direction, section = redis_cache.get_directory_subdir_section(message.from_user.id)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:',
                                reply_markup=general_keyboard.questions(message.from_user.id, directory, sub_direction,
                                                                        section))


class QuestionHandler:

    def operator_change_question(self, message):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            question_id = data['question_id_for_change']
        question_text, answers_text = TextParser.get_question_and_answers(message.text)
        db.update_question_and_answers(question_id, question_text, answers_text)
        bot.delete_state(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id, TEXT_MESSAGES['start_for_operator'],
                                reply_markup=operator_keyboard.enter_menu())

    def operator_add_question(self, message):
        directory, sub_direction, section = redis_cache.get_directory_subdir_section(message.from_user.id)
        question, answers = TextParser.get_question_and_answers(message.text)
        db.add_question_and_answers_(directory, sub_direction, section, question, answers)
        bot.delete_state(message.from_user.id, message.chat.id)
        bot.send_message(message.chat.id, '–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª!')

    def incorrect_change_question(self, message):
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –í–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤\n\n'
                                                 '–ü—Ä–∏–º–µ—Ä:\n–í–û–ü–†–û–° || –û–¢–í–ï–¢1| –û–¢–í–ï–¢2| –û–¢–í–ï–¢3')

    @staticmethod
    def incorrect_add_question(self, message):
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')


class FileHandler:

    def __download_and_save_file(self, message, path):
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        save_file(path=path, file=downloaded_file, filename=message.document.file_name)
        bot.send_message(message.from_user.id, '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')

    def get_technical_task_file(self, message):
        client_id = redis_cache.get_user_to_display_information()
        path = f'{DIR_FOR_TECHNICAL_TASKS}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.delete_state(message.from_user.id, message.chat.id)

    def get_commercial_offer_file(self, message):
        client_id = redis_cache.get_user_to_display_information()
        path = f'{DIR_FOR_COMMERCIAL_OFFERS}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.delete_state(message.from_user.id, message.chat.id)

    def get_report_file(self, message):
        client_id = redis_cache.get_user_to_display_information()
        path = f'{DIR_FOR_REPORTS}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.delete_state(message.from_user.id, message.chat.id)

    def get_other_file(self, message):
        client_id = redis_cache.get_user_to_display_information()
        path = f'{DIR_FOR_OTHER_FILES}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.delete_state(message.from_user.id, message.chat.id)

    def get_technical_task_file_from_dialogue(self, message):
        client_id = redis_cache.get_first_client_from_queue()
        path = f'{DIR_FOR_TECHNICAL_TASKS}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.send_document(client_id, document=message.document.file_id)
        bot.set_state(message.from_user.id, OperatorStates.dialogue_with_client)

    def get_commercial_offer_file_from_dialogue(self, message):
        client_id = redis_cache.get_first_client_from_queue()
        path = f'{DIR_FOR_COMMERCIAL_OFFERS}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.send_document(client_id, document=message.document.file_id)
        bot.set_state(message.from_user.id, OperatorStates.dialogue_with_client)

    def get_report_file_from_dialogue(self, message):
        client_id = redis_cache.get_first_client_from_queue()
        path = f'{DIR_FOR_REPORTS}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.send_document(client_id, document=message.document.file_id)
        bot.set_state(message.from_user.id, OperatorStates.dialogue_with_client)

    def get_other_file_from_dialogue(self, message):
        client_id = redis_cache.get_first_client_from_queue()
        path = f'{DIR_FOR_OTHER_FILES}/{client_id}'
        FileHandler.__download_and_save_file(bot, message, path)
        bot.send_document(client_id, document=message.document.file_id)
        bot.set_state(message.from_user.id, OperatorStates.dialogue_with_client)

    def file_incorrect(self, message):
        bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª!')


class DialogWithOperator:

    def send_request_to_operator(self, message):
        bot.send_message(message.from_user.id, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è...')

    def send_message_to_client(self, message):
        client_id = redis_cache.get_first_client_from_queue()
        log_dialogue = dialogue_logging(client_id)
        bot.send_message(client_id, f'üí¨–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}')
        log_dialogue.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}')

    def send_document_to_client(self, message):
        client_id = redis_cache.get_first_client_from_queue()
        log_dialogue = dialogue_logging(client_id)
        bot.send_document(client_id, document=message.document.file_id)
        log_dialogue.info('–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª')

    def send_photo_to_client(self, message):
        client_id = redis_cache.get_first_client_from_queue()
        log_dialogue = dialogue_logging(client_id)
        photo_id = message.photo[-1].file_id
        bot.send_photo(client_id, photo=photo_id)
        log_dialogue.info('–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É')

    def send_message_to_operator(self, message):
        user_id = message.from_user.id
        user_data = db.get_users_data(user_id)
        log_dialogue = dialogue_logging(user_id)
        log_dialogue.info(f'{user_data["company"]}|–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_data["name"]}: {message.text}')
        bot.send_message(OPERATOR_ID, f'–í—ã –æ–±—â–∞–µ—Ç–µ—Å—å: {user_data["name"]}\n'
                                             f'–ö–æ–º–ø–∞–Ω–∏—è: {user_data["company"]}\n'
                                             f'–¢–µ–ª–µ—Ñ–æ–Ω: {user_data["phone"]}\n\n'
                                             f'–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}',
                                reply_markup=operator_keyboard.menu_in_dialogue())

    def send_document_to_operator(self, message):
        client_id = message.from_user.id
        log_dialogue = dialogue_logging(client_id)
        bot.send_document(OPERATOR_ID, document=message.document.file_id)
        log_dialogue.info('–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª')

    def send_photo_to_operator(self, message):
        client_id = message.from_user.id
        log_dialogue = dialogue_logging(client_id)
        photo_id = message.photo[-1].file_id
        bot.send_photo(OPERATOR_ID, photo=photo_id)
        log_dialogue.info('–ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É')
